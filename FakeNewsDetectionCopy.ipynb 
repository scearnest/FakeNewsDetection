{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.2"
    },
    "colab": {
      "name": "FakeNewsDetection.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zdhuGWYzf0Vy"
      },
      "source": [
        "# Fake News Detection\n",
        "Sam Earnest\n",
        "Alex Johnson"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XHuVUg5_f8Rw"
      },
      "source": [
        "#Introduction and Motivation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xh8m40GDgAZh"
      },
      "source": [
        "A common complaint made by many followers (including many politicians) of contemporary 21st-century U.S. politics is that of \"fake\" news, that a news article or that a news source itself is deliberately producing and divulging news that is knowingly counterfactual. Seeing the supposed frequency of this problem, we, the authors of this project, decided to create a machine learning algorithm that would be able to differentiate between news considered to be true against news considered to be fake. The project that follows is our attempt at the differentiation of interest, highlighted by a Random Forest classification, as well as a principal component analysis (PCA) and center-base clustering method (k-means).\n",
        "\n",
        "To accomplish this purpose, we obtained a dataset that contains news articles classified as both true and false between the years 2015 and 2017. The dataset itself is very likely valid since all the data are merely news articles and their accompanying titles. In addition, the dataset was created by an academic source, thus likely eliminating any bias in the classification of news as true or fake. We note that this dataset is ideally suited to the demands of our project since it contains the classifications of true and false that we are trying to achieve.\n",
        "\n",
        "We note that this work is done mostly independent of other research that has been done on the matter. We are aware of the existence of other machine learning algorithms that fulfill similar purposes to that of our own, but we looked to develop a unique method that we created. We in no way look to infringe or trespass on their intellectual property or copy their methods. We do borrow the code for the kernel function from another author."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L5dP1EeyUr-6"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import random\n",
        "import nltk\n",
        "# nltk.download()\n",
        "import re\n",
        "# nltk.download('stopwords')\n",
        "# nltk.download('punkt')\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.tokenize import word_tokenize \n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.metrics import classification_report, confusion_matrix\n",
        "from sklearn import datasets\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QmKkI0bwUr-6"
      },
      "source": [
        "# Data Preparation and Cleaning"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KDLCt2NCVGG3"
      },
      "source": [
        "#### The data for this project came from kaggle.com, published by Clément Bisaillon for open source use, and is a collection of fake and true news articles from 2016 to 2018. In this section, we clean our data by removing stop words, non-english words, and limit the ammount of words to the top 500 most frequent. We remove stop words and non-English words because they will not be relevant in determining if an article contains true or fake news. We limit ourselves to the 500 most fequent words to aid in computational time and feel that 500 is a good threshold of relevance."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "r9uDTFJJUr-7",
        "outputId": "cb33d732-0f96-4bff-8a18-ae1b7c17a548"
      },
      "source": [
        "#Upload datasets and create true column\n",
        "df_fake = pd.read_csv('Fake.csv')\n",
        "df_true = pd.read_csv('True.csv')\n",
        "df_fake['true'] = 0\n",
        "df_true['true'] = 1\n",
        "df = pd.concat([df_fake, df_true])\n",
        "df"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>title</th>\n",
              "      <th>text</th>\n",
              "      <th>subject</th>\n",
              "      <th>date</th>\n",
              "      <th>true</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Donald Trump Sends Out Embarrassing New Year’...</td>\n",
              "      <td>Donald Trump just couldn t wish all Americans ...</td>\n",
              "      <td>News</td>\n",
              "      <td>December 31, 2017</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Drunk Bragging Trump Staffer Started Russian ...</td>\n",
              "      <td>House Intelligence Committee Chairman Devin Nu...</td>\n",
              "      <td>News</td>\n",
              "      <td>December 31, 2017</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Sheriff David Clarke Becomes An Internet Joke...</td>\n",
              "      <td>On Friday, it was revealed that former Milwauk...</td>\n",
              "      <td>News</td>\n",
              "      <td>December 30, 2017</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Trump Is So Obsessed He Even Has Obama’s Name...</td>\n",
              "      <td>On Christmas day, Donald Trump announced that ...</td>\n",
              "      <td>News</td>\n",
              "      <td>December 29, 2017</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Pope Francis Just Called Out Donald Trump Dur...</td>\n",
              "      <td>Pope Francis used his annual Christmas Day mes...</td>\n",
              "      <td>News</td>\n",
              "      <td>December 25, 2017</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21412</th>\n",
              "      <td>'Fully committed' NATO backs new U.S. approach...</td>\n",
              "      <td>BRUSSELS (Reuters) - NATO allies on Tuesday we...</td>\n",
              "      <td>worldnews</td>\n",
              "      <td>August 22, 2017</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21413</th>\n",
              "      <td>LexisNexis withdrew two products from Chinese ...</td>\n",
              "      <td>LONDON (Reuters) - LexisNexis, a provider of l...</td>\n",
              "      <td>worldnews</td>\n",
              "      <td>August 22, 2017</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21414</th>\n",
              "      <td>Minsk cultural hub becomes haven from authorities</td>\n",
              "      <td>MINSK (Reuters) - In the shadow of disused Sov...</td>\n",
              "      <td>worldnews</td>\n",
              "      <td>August 22, 2017</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21415</th>\n",
              "      <td>Vatican upbeat on possibility of Pope Francis ...</td>\n",
              "      <td>MOSCOW (Reuters) - Vatican Secretary of State ...</td>\n",
              "      <td>worldnews</td>\n",
              "      <td>August 22, 2017</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21416</th>\n",
              "      <td>Indonesia to buy $1.14 billion worth of Russia...</td>\n",
              "      <td>JAKARTA (Reuters) - Indonesia will buy 11 Sukh...</td>\n",
              "      <td>worldnews</td>\n",
              "      <td>August 22, 2017</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>44898 rows × 5 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                   title  ... true\n",
              "0       Donald Trump Sends Out Embarrassing New Year’...  ...    0\n",
              "1       Drunk Bragging Trump Staffer Started Russian ...  ...    0\n",
              "2       Sheriff David Clarke Becomes An Internet Joke...  ...    0\n",
              "3       Trump Is So Obsessed He Even Has Obama’s Name...  ...    0\n",
              "4       Pope Francis Just Called Out Donald Trump Dur...  ...    0\n",
              "...                                                  ...  ...  ...\n",
              "21412  'Fully committed' NATO backs new U.S. approach...  ...    1\n",
              "21413  LexisNexis withdrew two products from Chinese ...  ...    1\n",
              "21414  Minsk cultural hub becomes haven from authorities  ...    1\n",
              "21415  Vatican upbeat on possibility of Pope Francis ...  ...    1\n",
              "21416  Indonesia to buy $1.14 billion worth of Russia...  ...    1\n",
              "\n",
              "[44898 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ee5_FKCDUr-7"
      },
      "source": [
        "#### First we need to identify all of the potential words in out data set. We throw out all stop words, numbers, and non-alphabetic charaters. The top 500 most frequent words become the columns for out dataframe. This is done using regular expressions"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eLnJIBhYUr-7"
      },
      "source": [
        "wrds = {}\n",
        "stop_words = set(stopwords.words('english'))\n",
        "#Set up tokenizer to only grab ASCII characters\n",
        "tokenizer = nltk.RegexpTokenizer(r\"\\w+\")\n",
        "\n",
        "for index, row in df.iterrows():\n",
        "    text = row['text'].lower()\n",
        "    #Filter for stop words\n",
        "    text = re.sub(r'\\d+', '', text)\n",
        "    word_tokens = tokenizer.tokenize(text)\n",
        "    filtered_text = [w for w in word_tokens if not w in stop_words]\n",
        "    \n",
        "    #Go through each sig word in text and add frequency to dictionary of words\n",
        "    for word in filtered_text:\n",
        "        if '_' in word:\n",
        "            continue\n",
        "        if word in wrds:\n",
        "            wrds[word] = wrds[word] + 1\n",
        "        else:\n",
        "            wrds[word] = 1 \n",
        "\n",
        "wrds = sorted(wrds, key=wrds.get, reverse=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 439
        },
        "id": "JjCJbLtYUr-7",
        "outputId": "fd28b0c2-ac3d-4047-864a-d5437193ee0b"
      },
      "source": [
        "#Create columns using the 500 top words a column names\n",
        "master_df = pd.DataFrame(0, index= df.index, columns = wrds[:500])\n",
        "master_df"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>trump</th>\n",
              "      <th>said</th>\n",
              "      <th>president</th>\n",
              "      <th>would</th>\n",
              "      <th>u</th>\n",
              "      <th>people</th>\n",
              "      <th>one</th>\n",
              "      <th>state</th>\n",
              "      <th>also</th>\n",
              "      <th>new</th>\n",
              "      <th>reuters</th>\n",
              "      <th>clinton</th>\n",
              "      <th>obama</th>\n",
              "      <th>donald</th>\n",
              "      <th>government</th>\n",
              "      <th>house</th>\n",
              "      <th>states</th>\n",
              "      <th>republican</th>\n",
              "      <th>year</th>\n",
              "      <th>could</th>\n",
              "      <th>united</th>\n",
              "      <th>told</th>\n",
              "      <th>like</th>\n",
              "      <th>white</th>\n",
              "      <th>two</th>\n",
              "      <th>campaign</th>\n",
              "      <th>time</th>\n",
              "      <th>election</th>\n",
              "      <th>last</th>\n",
              "      <th>party</th>\n",
              "      <th>news</th>\n",
              "      <th>first</th>\n",
              "      <th>washington</th>\n",
              "      <th>country</th>\n",
              "      <th>even</th>\n",
              "      <th>former</th>\n",
              "      <th>us</th>\n",
              "      <th>hillary</th>\n",
              "      <th>years</th>\n",
              "      <th>many</th>\n",
              "      <th>...</th>\n",
              "      <th>middle</th>\n",
              "      <th>economy</th>\n",
              "      <th>st</th>\n",
              "      <th>live</th>\n",
              "      <th>coming</th>\n",
              "      <th>coalition</th>\n",
              "      <th>weapons</th>\n",
              "      <th>congressional</th>\n",
              "      <th>young</th>\n",
              "      <th>announced</th>\n",
              "      <th>elections</th>\n",
              "      <th>sources</th>\n",
              "      <th>muslims</th>\n",
              "      <th>students</th>\n",
              "      <th>effort</th>\n",
              "      <th>votes</th>\n",
              "      <th>chairman</th>\n",
              "      <th>visit</th>\n",
              "      <th>nearly</th>\n",
              "      <th>six</th>\n",
              "      <th>late</th>\n",
              "      <th>rules</th>\n",
              "      <th>daily</th>\n",
              "      <th>thousands</th>\n",
              "      <th>speaking</th>\n",
              "      <th>street</th>\n",
              "      <th>talk</th>\n",
              "      <th>sent</th>\n",
              "      <th>global</th>\n",
              "      <th>october</th>\n",
              "      <th>paul</th>\n",
              "      <th>authorities</th>\n",
              "      <th>bush</th>\n",
              "      <th>front</th>\n",
              "      <th>candidates</th>\n",
              "      <th>december</th>\n",
              "      <th>position</th>\n",
              "      <th>rule</th>\n",
              "      <th>army</th>\n",
              "      <th>capital</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21412</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21413</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21414</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21415</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21416</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>44898 rows × 500 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       trump  said  president  would  ...  position  rule  army  capital\n",
              "0          0     0          0      0  ...         0     0     0        0\n",
              "1          0     0          0      0  ...         0     0     0        0\n",
              "2          0     0          0      0  ...         0     0     0        0\n",
              "3          0     0          0      0  ...         0     0     0        0\n",
              "4          0     0          0      0  ...         0     0     0        0\n",
              "...      ...   ...        ...    ...  ...       ...   ...   ...      ...\n",
              "21412      0     0          0      0  ...         0     0     0        0\n",
              "21413      0     0          0      0  ...         0     0     0        0\n",
              "21414      0     0          0      0  ...         0     0     0        0\n",
              "21415      0     0          0      0  ...         0     0     0        0\n",
              "21416      0     0          0      0  ...         0     0     0        0\n",
              "\n",
              "[44898 rows x 500 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KHfpGJinUr-7"
      },
      "source": [
        "#### Now we add the frequency of each word to its associated document."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HeDLcTCrUr-7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 341
        },
        "outputId": "4d75537f-42ff-44fc-f1e6-aeace8fcee12"
      },
      "source": [
        "for index, row in df.iterrows():\n",
        "    text = row['text'].lower()\n",
        "    #Filter for stop words\n",
        "    text = re.sub(r'\\d+', '', text)\n",
        "    word_tokens = tokenizer.tokenize(text)\n",
        "    filtered_text = [w for w in word_tokens if not w in stop_words]\n",
        "    \n",
        "    for word in filtered_text:\n",
        "        if word in wrds[:500]:\n",
        "            master_df.loc[index, word] = master_df.loc[index, word] + 1 "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-5-91d57b115293>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mfiltered_text\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mwrds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m500\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m             \u001b[0mmaster_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mword\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmaster_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mword\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    871\u001b[0m                     \u001b[0;31m# AttributeError for IntervalTree get_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m                     \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    874\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m             \u001b[0;31m# we by definition only have the 0th axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   1042\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1043\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1044\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_lowerdim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1045\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mIndexingError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1046\u001b[0m             \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_lowerdim\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m    784\u001b[0m                 \u001b[0;31m# We don't need to check for tuples here because those are\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    785\u001b[0m                 \u001b[0;31m#  caught by the _is_nested_tuple_indexer check above.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 786\u001b[0;31m                 \u001b[0msection\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    787\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    788\u001b[0m                 \u001b[0;31m# We should never have a scalar section here, because\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1108\u001b[0m         \u001b[0;31m# fall thru to straight lookup\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1109\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1110\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_label\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1111\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1112\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_slice_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mslice_obj\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mslice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_label\u001b[0;34m(self, label, axis)\u001b[0m\n\u001b[1;32m   1057\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_label\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1058\u001b[0m         \u001b[0;31m# GH#5667 this will fail if the label is not present in the axis.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1059\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1060\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1061\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_handle_lowerdim_multi_index_axis0\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mxs\u001b[0;34m(self, key, axis, level, drop_level)\u001b[0m\n\u001b[1;32m   3494\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mloc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbool_\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3495\u001b[0m                     \u001b[0;34m(\u001b[0m\u001b[0minds\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mloc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3496\u001b[0;31m                     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_take_with_is_copy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3497\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3498\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_take_with_is_copy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_take_with_is_copy\u001b[0;34m(self, indices, axis)\u001b[0m\n\u001b[1;32m   3361\u001b[0m         \u001b[0mSee\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mdocstring\u001b[0m \u001b[0mof\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m`\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;31m`\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mfull\u001b[0m \u001b[0mexplanation\u001b[0m \u001b[0mof\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mparameters\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3362\u001b[0m         \"\"\"\n\u001b[0;32m-> 3363\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3364\u001b[0m         \u001b[0;31m# Maybe set copy if we didn't actually change the index.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3365\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mequals\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mtake\u001b[0;34m(self, indices, axis, is_copy, **kwargs)\u001b[0m\n\u001b[1;32m   3349\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3350\u001b[0m         new_data = self._mgr.take(\n\u001b[0;32m-> 3351\u001b[0;31m             \u001b[0mindices\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_block_manager_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverify\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3352\u001b[0m         )\n\u001b[1;32m   3353\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_constructor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__finalize__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"take\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mtake\u001b[0;34m(self, indexer, axis, verify, convert)\u001b[0m\n\u001b[1;32m   1446\u001b[0m         \u001b[0mnew_labels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1447\u001b[0m         return self.reindex_indexer(\n\u001b[0;32m-> 1448\u001b[0;31m             \u001b[0mnew_axis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnew_labels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_dups\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1449\u001b[0m         )\n\u001b[1;32m   1450\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mreindex_indexer\u001b[0;34m(self, new_axis, indexer, axis, fill_value, allow_dups, copy, consolidate)\u001b[0m\n\u001b[1;32m   1290\u001b[0m                     ),\n\u001b[1;32m   1291\u001b[0m                 )\n\u001b[0;32m-> 1292\u001b[0;31m                 \u001b[0;32mfor\u001b[0m \u001b[0mblk\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mblocks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1293\u001b[0m             ]\n\u001b[1;32m   1294\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m   1290\u001b[0m                     ),\n\u001b[1;32m   1291\u001b[0m                 )\n\u001b[0;32m-> 1292\u001b[0;31m                 \u001b[0;32mfor\u001b[0m \u001b[0mblk\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mblocks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1293\u001b[0m             ]\n\u001b[1;32m   1294\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/internals/blocks.py\u001b[0m in \u001b[0;36mtake_nd\u001b[0;34m(self, indexer, axis, new_mgr_locs, fill_value)\u001b[0m\n\u001b[1;32m   1254\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1255\u001b[0m         new_values = algos.take_nd(\n\u001b[0;32m-> 1256\u001b[0;31m             \u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_fill\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mallow_fill\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfill_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfill_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1257\u001b[0m         )\n\u001b[1;32m   1258\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/algorithms.py\u001b[0m in \u001b[0;36mtake_nd\u001b[0;34m(arr, indexer, axis, out, fill_value, allow_fill)\u001b[0m\n\u001b[1;32m   1653\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfill_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfill_value\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_fill\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mallow_fill\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1654\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1655\u001b[0;31m     \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mextract_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1656\u001b[0m     \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1657\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/construction.py\u001b[0m in \u001b[0;36mextract_array\u001b[0;34m(obj, extract_numpy)\u001b[0m\n\u001b[1;32m    379\u001b[0m     \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    380\u001b[0m     \"\"\"\n\u001b[0;32m--> 381\u001b[0;31m     \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mABCIndexClass\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mABCSeries\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    382\u001b[0m         \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    383\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/dtypes/generic.py\u001b[0m in \u001b[0;36m_check\u001b[0;34m(cls, inst)\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mclassmethod\u001b[0m  \u001b[0;31m# type: ignore\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_check\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcls\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minst\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mbool\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minst\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"_typ\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcomp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0mdct\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m__instancecheck__\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_check\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m__subclasscheck__\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_check\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MnwsF465Ur-7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 439
        },
        "outputId": "c7c2c471-cc24-408e-ffe4-5d81d4b01ef0"
      },
      "source": [
        "#Save data frame to avoid computational time\n",
        "master_df = pd.read_csv('500matrix.csv', index_col=0)\n",
        "#Move truth column to be the first column\n",
        "truth = master_df.pop('true')\n",
        "master_df.insert(0,'true',truth)\n",
        "\n",
        "df_true = master_df[master_df['true']==1]\n",
        "df_false = master_df[master_df['true']==0]\n",
        "master_df"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>true</th>\n",
              "      <th>trump</th>\n",
              "      <th>said</th>\n",
              "      <th>president</th>\n",
              "      <th>would</th>\n",
              "      <th>u</th>\n",
              "      <th>people</th>\n",
              "      <th>one</th>\n",
              "      <th>state</th>\n",
              "      <th>also</th>\n",
              "      <th>new</th>\n",
              "      <th>reuters</th>\n",
              "      <th>clinton</th>\n",
              "      <th>obama</th>\n",
              "      <th>donald</th>\n",
              "      <th>government</th>\n",
              "      <th>house</th>\n",
              "      <th>states</th>\n",
              "      <th>republican</th>\n",
              "      <th>year</th>\n",
              "      <th>could</th>\n",
              "      <th>united</th>\n",
              "      <th>told</th>\n",
              "      <th>like</th>\n",
              "      <th>white</th>\n",
              "      <th>two</th>\n",
              "      <th>campaign</th>\n",
              "      <th>time</th>\n",
              "      <th>election</th>\n",
              "      <th>last</th>\n",
              "      <th>party</th>\n",
              "      <th>news</th>\n",
              "      <th>first</th>\n",
              "      <th>washington</th>\n",
              "      <th>country</th>\n",
              "      <th>even</th>\n",
              "      <th>former</th>\n",
              "      <th>us</th>\n",
              "      <th>hillary</th>\n",
              "      <th>years</th>\n",
              "      <th>...</th>\n",
              "      <th>middle</th>\n",
              "      <th>economy</th>\n",
              "      <th>st</th>\n",
              "      <th>live</th>\n",
              "      <th>coming</th>\n",
              "      <th>coalition</th>\n",
              "      <th>weapons</th>\n",
              "      <th>congressional</th>\n",
              "      <th>young</th>\n",
              "      <th>announced</th>\n",
              "      <th>elections</th>\n",
              "      <th>sources</th>\n",
              "      <th>muslims</th>\n",
              "      <th>students</th>\n",
              "      <th>effort</th>\n",
              "      <th>votes</th>\n",
              "      <th>chairman</th>\n",
              "      <th>visit</th>\n",
              "      <th>nearly</th>\n",
              "      <th>six</th>\n",
              "      <th>late</th>\n",
              "      <th>rules</th>\n",
              "      <th>daily</th>\n",
              "      <th>thousands</th>\n",
              "      <th>speaking</th>\n",
              "      <th>street</th>\n",
              "      <th>talk</th>\n",
              "      <th>sent</th>\n",
              "      <th>global</th>\n",
              "      <th>october</th>\n",
              "      <th>paul</th>\n",
              "      <th>authorities</th>\n",
              "      <th>bush</th>\n",
              "      <th>front</th>\n",
              "      <th>candidates</th>\n",
              "      <th>december</th>\n",
              "      <th>position</th>\n",
              "      <th>rule</th>\n",
              "      <th>army</th>\n",
              "      <th>capital</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>16</td>\n",
              "      <td>8</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>11</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>16</td>\n",
              "      <td>12</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>15</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>14</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>21</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>12</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44893</th>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>20</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44894</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44895</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44896</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44897</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>44898 rows × 501 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       true  trump  said  president  ...  position  rule  army  capital\n",
              "0         0     16     8          5  ...         0     0     0        0\n",
              "1         0     16    12          6  ...         1     0     0        0\n",
              "2         0     15     8          2  ...         0     0     0        0\n",
              "3         0     21     3          3  ...         0     0     0        0\n",
              "4         0     10    12          5  ...         0     0     0        1\n",
              "...     ...    ...   ...        ...  ...       ...   ...   ...      ...\n",
              "44893     1      6    10          5  ...         0     1     0        0\n",
              "44894     1      0     3          1  ...         1     0     0        0\n",
              "44895     1      0     5          1  ...         0     0     0        0\n",
              "44896     1      0     4          0  ...         0     0     0        1\n",
              "44897     1      0     5          0  ...         0     0     0        0\n",
              "\n",
              "[44898 rows x 501 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "HYADx8uk-JLD",
        "outputId": "a461321d-81c9-4e84-a09f-d91bd18c3ffb"
      },
      "source": [
        "master_df.sum(axis=0)[1:25].plot.bar(figsize=(8,4), title='Top 25 Word Frequency', ylabel='Frequency', xlabel='Word', color='green')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f71ce5a5c88>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 114
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2sBzNzKUAoby"
      },
      "source": [
        "As can be seen from the bar chart the word 'trump' is by far the most frequent word in our set. Other common words include 'said', 'president', and 'would'. This being said, we note that words such as 'said' and 'would' may not be very telling of fake or true news as they are very common in the English vernacular. We note interestingly words like 'clinton', 'reuters', and 'government' also have high frequencies. In our analysis, therefore, we may purposefully choose to omit futher observation into the more ordinary words (such as 'would' or 'said'), since we hypothesize no telling findings from these words. However, there appear to be many other words of marked interest that have higher frequencies that will be the subject of further study in the analysis that follows.\n",
        "\n",
        "Immediately, we include several histograms of a few of these words that emit higher levels of interest."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Sp_aSI1IUr-7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 851
        },
        "outputId": "fc8b473f-5846-44e7-ec71-7e74ada0a219"
      },
      "source": [
        "#Histogram 1: Trump\n",
        "plt.hist(master_df[master_df[\"true\"]==0][\"trump\"],alpha=0.2,bins=50,color=\"red\",label=\"Fake\")\n",
        "plt.hist(master_df[master_df[\"true\"]==1][\"trump\"],alpha=0.5,bins=50,color=\"green\",label=\"True\")\n",
        "plt.title(\"Trump True vs. Fake Mentions\")\n",
        "plt.xlabel(\"Number of times mentioned\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.xlim(0,40)\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "#Histogram 2: Russia\n",
        "plt.hist(master_df[master_df[\"true\"]==0][\"russia\"],alpha=0.2,bins=50,color=\"red\",label=\"Fake\")\n",
        "plt.hist(master_df[master_df[\"true\"]==1][\"russia\"],alpha=0.5,bins=50,color=\"green\",label=\"True\")\n",
        "plt.title(\"Russia True vs. Fake Mentions\")\n",
        "plt.xlabel(\"Number of times mentioned\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.xlim(0,17)\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "#Histogram 3: Obama\n",
        "plt.hist(master_df[master_df[\"true\"]==0][\"reuters\"],alpha=0.2,bins=50,color=\"red\",label=\"Fake\")\n",
        "plt.hist(master_df[master_df[\"true\"]==1][\"reuters\"],alpha=0.5,bins=50,color=\"green\",label=\"True\")\n",
        "plt.title(\"Reuters True vs. Fake Mentions\")\n",
        "plt.xlabel(\"Number of times mentioned\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.xlim(0,10)\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9Pa1j9vR5oU0"
      },
      "source": [
        "Two of the words that we initially hypothesize to be indicators of fake news are the words \"Trump\" and \"Russia\" from the controversies that these two political figures were involved in in the years 2015-2017 (the year from which our data comes from). To check for this, we plot the overlayed histograms of fake news against true news for \"Trump\" and \"Russia\". Notice that for both \"Trump\" and \"Russia\", the frequency of number of mentions between 0 and 5 is high for both fake and true news, which seems to confirm our early interest. Moreover, in the same number of mentions category, it is evident that fake mentions for both \"Trump\" and \"Russia\" have a higher frequency than their true counterparts, showing that these words are perhaps strong indicators of fake news. \n",
        "\n",
        "We then compare these two words to the word \"Reuters\" (a international news outlet based in Germany), which we hypothesize to be a control against \"Trump\" and \"Russia\". Upon first observation of the similarly overlayed histogram, it is clear that \"Reuters\" is indeed a strong control, since there are very few fake news mentions of this word, compared to many true news mentions (which are likely the articles put out by the the company in interest). \n",
        "\n",
        "These observations from the visualizations are impressively telling and are consistent with our expectations on the matter. We run more tests to further solidify these expectations in what follows."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9CgtUlyhUr-7"
      },
      "source": [
        "Now we format the data as y and X and split between train and test sets"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o-MJBlnmUr-7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d5f6dc76-7ee8-490c-c09f-05d469f95bbe"
      },
      "source": [
        "data = master_df.to_numpy()\n",
        "y = data[:,0]\n",
        "X = data[:,1:]\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.98)\n",
        "print(X_train.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(897, 500)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ot8YEighUr-7"
      },
      "source": [
        "# Feature Engineering (Kernel Function)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CLLf5p0jUr-7"
      },
      "source": [
        "#### Now we define our kerneling method. We chose to use the document similarity kernel as a opposed to the cosine similarity because we're dealing with documents and this kernel will give better results. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jZfZONmcUr-7"
      },
      "source": [
        "def tf(x):\n",
        "    return np.log(1+x)\n",
        "\n",
        "def idf(j):\n",
        "    return np.log(j.size/(1+np.count_nonzero(j)))\n",
        "\n",
        "def phi(x, idf):\n",
        "    result = np.zeros(len(idf))\n",
        "    for i in range(0,len(idf)):\n",
        "        result[i] = x[i]*idf[i]\n",
        "    return result\n",
        "\n",
        "def doc_sim(M):\n",
        "    #Apply tf to each element in M\n",
        "    M = np.vectorize(tf)(M)\n",
        "    #Create the inverse document frequency array- one value for each word\n",
        "    idf_v = np.zeros(M.shape[1])\n",
        "    for j in range (0,M.shape[1]):\n",
        "        idf_v[j] = idf(M[:,j]) \n",
        "\n",
        "    #Create kernel matrix and fill it \n",
        "    K = np.zeros((M.shape[0], M.shape[0]))\n",
        "    for i in range(0, K.shape[0]):\n",
        "        #print(i)\n",
        "        for j in range(0, K.shape[1]):\n",
        "            phi_x = phi(M[i,:], idf_v)\n",
        "            phi_y = phi(M[j,:], idf_v)\n",
        "            K[i,j] = (np.transpose(phi_x)@phi_y)/(np.linalg.norm(phi_x)*np.linalg.norm(phi_y))\n",
        "\n",
        "    return K\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x6DrMA4tUr-7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4eb151d9-ef89-4095-de0b-50ae5a6a8260"
      },
      "source": [
        "K = doc_sim(X_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:35: RuntimeWarning: invalid value encountered in double_scalars\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KeHwSNAwUr-7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164
        },
        "outputId": "61bb6db2-9937-4c7d-bbee-251fac84fe2f"
      },
      "source": [
        "np.save('test5.txt', K)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-5-d5832a8ad2c3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'test5.txt'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mK\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'K' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ld-WgFQQziri"
      },
      "source": [
        "k = np.load(\"test4.txt.npy\")\n",
        "l = np.argwhere(np.isnan(k))[0,1]\n",
        "k[:,l] = 0.1\n",
        "k[l,:] = 0.1"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k4XaRS9-YDIz"
      },
      "source": [
        "# Principal Component Analysis"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "h65zvVYsaACY",
        "outputId": "ecb3cfaf-e805-4441-ebdf-6622356e749c"
      },
      "source": [
        "#First with no kernel\n",
        "X = X_train\n",
        "y = y_train\n",
        "pca = PCA(n_components=5)\n",
        "Xhat_1 = pca.fit_transform(X)\n",
        "\n",
        "var = pca.explained_variance_ratio_\n",
        "var = var[0]+var[1]\n",
        "\n",
        "f = Xhat_1[y_train==0]\n",
        "t = Xhat_1[y_train==1]\n",
        "f_plt = plt.scatter(f[:,0]*-1, f[:,1], color = 'red', alpha=0.25)\n",
        "t_plt = plt.scatter(t[:,0]*-1, t[:,1], color = 'blue',alpha=0.25)\n",
        "plt.legend([f_plt, t_plt], ['False', 'True'])\n",
        "plt.title(\"Principal Component Analysis No Kernel with Variance: \" + str(var) )\n",
        "plt.show()\n",
        "\n",
        "#Now with kernel\n",
        "X = k\n",
        "y = y_train\n",
        "pca = PCA(n_components=5)\n",
        "Xhat = pca.fit_transform(X)\n",
        "\n",
        "var = pca.explained_variance_ratio_\n",
        "var = var[0]+var[1]\n",
        "\n",
        "f = Xhat[y_train==0]\n",
        "t = Xhat[y_train==1]\n",
        "f_plt = plt.scatter(f[:,0]*-1, f[:,1], color = 'red', alpha=0.25)\n",
        "t_plt = plt.scatter(t[:,0]*-1, t[:,1], color = 'blue',alpha=0.25)\n",
        "plt.legend([f_plt, t_plt], ['False', 'True'])\n",
        "plt.title(\"Principal Component Analysis With Kernel with Variance: \" + str(var) )\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BsCc3ZIabJBU"
      },
      "source": [
        "As you can see both methods fail to seperate the data in any meaningful way. This being said, the PCA on the kernel data is certainly more spread out and slightly better than that on the non-kernel data, as is apparent in their variances. We now move onto a Random Forest classification to see if that method allows us to more accurately classify our data."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8UYngY3UvOb6"
      },
      "source": [
        "# Random Forest Classification"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8VTavHBBkaRA"
      },
      "source": [
        "Here we use the Random Forest method as a prediction tool to classify between true and fake news. Notice that we run two separate Random Forest classifications, which we do to find the \"best\" (or most predictive) 100 features."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8YhGAIaYvNdq",
        "outputId": "37954075-5e42-41ff-c5f4-a0c84ad30da9"
      },
      "source": [
        "rf = RandomForestClassifier(criterion=\"entropy\")\n",
        "rf.fit(Xhat_1,y_train)\n",
        "# rf.predict(X_train,y_train)\n",
        "\n",
        "param_grid = {\"n_estimators\": [100,200,300], \"max_depth\": [10,25,50,75], \"min_samples_leaf\": [10,5,2]}\n",
        "rf_gs = GridSearchCV(rf, param_grid, scoring=\"f1\", n_jobs=-1)\n",
        "rf_gs.fit(Xhat_1,y_train)\n",
        "print(rf_gs.best_params_, rf_gs.best_score_, sep='\\n')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'max_depth': 25, 'min_samples_leaf': 2, 'n_estimators': 100}\n",
            "0.4114346911493734\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wQMI4n8S_MPZ"
      },
      "source": [
        "result = RandomForestClassifier(oob_score=True, max_depth=25, n_estimators=100, min_samples_leaf=2).fit(X_train,y_train)\n",
        "importances = result.feature_importances_\n",
        "\n",
        "# print(importances)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CniBONX__vJ_",
        "outputId": "b7ab6ce0-6019-48a7-acc1-68d396ff5ad7"
      },
      "source": [
        "importances1 = importances.argsort()[-100:][::-1]\n",
        "print(importances[10])\n",
        "print(importances1)\n",
        "importances1_list = importances1.tolist()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.012111894375653355\n",
            "[ 10   1   2   0   3   5  36   7  39  31   6  15   4 177  24 387  20  38\n",
            "  19   9  23  12  56  34  21 109  13  28  57  81 434  84  30  67  29  25\n",
            " 432  85  42 194  61  45   8  73  17  50  14  16  18 118  53 159  40  26\n",
            " 178 172 107 114 111 128 110 245  79 117  37 264  80 201  35 392  55 391\n",
            " 116  66 129  27 268 130  22 127  74  33  89  32  62 101  76  91  44 357\n",
            " 333 295 120  95 236  86  11 124 137  47]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7pgb01SilAs8"
      },
      "source": [
        "After having found the most predictive 100 features, we now create a new dataframe (referred to as new_df in the code) that is solely based on these 100 features. Once this dataframe has been created, we then apply the doc_sim function once again to create the kernel matrix from the new training data. Lastly, we are be able to run the Random Forest classification again. Our analysis will follow."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PV7UashjANj-",
        "outputId": "0bb42a79-4520-4a46-9755-79f212c25b3e"
      },
      "source": [
        "new_df = master_df.iloc[:,importances1_list]\n",
        "col_name=\"true\"\n",
        "first_col = new_df.pop(col_name)\n",
        "new_df.insert(0, col_name, first_col)\n",
        "\n",
        "data1 = new_df.to_numpy()\n",
        "y = data1[:,0]\n",
        "X = data1[:,1:]\n",
        "\n",
        "rfX_train, rfX_test, rfy_train, rfy_test = train_test_split(X, y, test_size=0.98)\n",
        "print(rfX_train.shape)\n",
        "pca = PCA(n_components=99)\n",
        "rfXhat_1 = pca.fit_transform(rfX_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(897, 99)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qFZKPbjEKNm1",
        "outputId": "a990e239-ad78-477b-80b5-6658434beaab"
      },
      "source": [
        "rf1 = RandomForestClassifier(criterion=\"entropy\")\n",
        "rf1.fit(rfXhat_1,rfy_train)\n",
        "\n",
        "param_grid = {\"n_estimators\": [100,200,300], \"max_depth\": [10,25,50,75], \"min_samples_leaf\": [10,5,2]}\n",
        "rf1_gs = GridSearchCV(rf1, param_grid, n_jobs=-1)\n",
        "rf1_gs.fit(rfXhat_1,rfy_train)\n",
        "print(rf1_gs.best_params_, rf1_gs.best_score_, sep='\\n')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'max_depth': 75, 'min_samples_leaf': 5, 'n_estimators': 300}\n",
            "0.5418063314711359\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H-Z8yIFpVpv9",
        "outputId": "ee713e02-554c-493e-b924-94e0514fbda3"
      },
      "source": [
        "result = rf1_gs.best_estimator_.predict(rfX_test)\n",
        "CM = confusion_matrix(rfy_test,result)\n",
        "print(CM)\n",
        "print('\\n')\n",
        "CR = classification_report(rfy_test, result)\n",
        "print(CR)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[12959 10031]\n",
            " [11272  9739]]\n",
            "\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.53      0.56      0.55     22990\n",
            "           1       0.49      0.46      0.48     21011\n",
            "\n",
            "    accuracy                           0.52     44001\n",
            "   macro avg       0.51      0.51      0.51     44001\n",
            "weighted avg       0.51      0.52      0.51     44001\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LUnfVbmi0ngz"
      },
      "source": [
        "As can be seen, our Random Forest classification approach does not necessarily yield the accuracy that was initially desired. In other words, this prediction method does not classify news as true or fake with a very high accuracy, with the best score being approximately 52%. \n",
        "\n",
        "With this being said, it is entirely possible that Random Forest classification was not the ideal prediction method for a problem of this type. It may be more useful in future versions of projects of this type to run a pipeline to help us decide which prediction method and which hyperparameters would be the best to pursue. From this, we now move on to a k-means clustering to see if the method is more effective at classifying news as true or fake."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Kdds3Br1Ur-7"
      },
      "source": [
        "# Clustering and Visualization (K-means)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OZlbdNyGUr-7"
      },
      "source": [
        "kmeans = KMeans(n_clusters=2,init=\"random\",algorithm=\"full\", random_state=random.randint(0,100))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AaNkvMig8EMs",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "outputId": "b0a05871-4ad8-41ac-d07b-a4f1e63b66a6"
      },
      "source": [
        "#Actual clustering\n",
        "x_1 = kmeans.fit_predict(k)\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "for i in range(0, len(x_1)):\n",
        "    if x_1[i] == 1:\n",
        "      color = 'red'\n",
        "      label = 'True'\n",
        "    else:\n",
        "      color = 'blue'\n",
        "      label = 'False'\n",
        "    ax.scatter(k[i,0], k[i,1], c = color, s = 25,alpha=0.25)\n",
        "leg = ax.legend(['Cluster 1', 'Cluster2'])\n",
        "leg.legendHandles[0].set_color('red')\n",
        "leg.legendHandles[1].set_color('blue')\n",
        "plt.title(\"Clusters\")\n",
        "plt.xlim(0,0.5)\n",
        "plt.ylim(0,0.5)\n",
        "\n",
        "plt.show()\n",
        "#kmeans.cluster_centers_\n",
        "\n",
        "x_1 = kmeans.fit_predict(k)\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "for i in range(0, len(x_1)):\n",
        "    if  y_train[i] == 1:\n",
        "      color = 'red'\n",
        "      label = 'True'\n",
        "    else:\n",
        "      color = 'blue'\n",
        "      label = 'False'\n",
        "    ax.scatter(k[i,0], k[i,1], c = color, s = 25,alpha=0.25)\n",
        "leg = ax.legend(['True', 'False'])\n",
        "leg.legendHandles[0].set_color('red')\n",
        "leg.legendHandles[1].set_color('blue')\n",
        "plt.title(\"Clusters\")\n",
        "plt.xlim(0,0.5)\n",
        "plt.ylim(0,0.5)\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1QbkQLsBh8n2"
      },
      "source": [
        "As can be seen on the scatter plot above, our method has led to the development of two somewhat unique clusters from our training set. After K has been formatted correctly, we then use the KMeans function to develop our clusters. We then use the scatterplot function to visualize the data as seen.\n",
        "\n",
        "We note that the two clusters are somewhat unique and the clustering is by no means perfect. In the visualization, the blue-colored dots represent news that is being classified as fake, whereas the red-colored dots represent news that is being classified as true. Please observe that there are several locations of overlap between the two colors, indicating that the clustering method is not perfect, as specified before. However, this does provide a good representation of the classification we were seeking and is thus useful for our analysis."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zMx4Av9faBXy"
      },
      "source": [
        "We conclude that k-means clusering is, though imperfect, the best method for seperating fake news from true news. In a quick note on ethics, if this fake news detection project were to actually be used it would be important to continuously retrain the model and update it's features. News is something that can change drastically from year to year and judging fake news today based off 2016's new cycle won't be accurate. If a false sense of trust was put in the algorithm, and it wasn't updated frequently, it could potentially prevent individuals from reading true and important information or feed them false information."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ya8j6OB1kqQx"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}